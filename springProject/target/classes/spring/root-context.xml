<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
	<!-- root-context.xml 파일은 서버 구동 시 web.xml에서 가장 먼저 읽어 들이는 설정 파일
	
			 DB 연결 정보(JDBC, MyBatis, DBCP), ADP, 트랜잭션 처리 관련 설정,
			 파일 업로드 관련 설정 등과 같은 프로젝트 전반적으로 사용될 설정 작성
	 -->
		
		
	<!-- DBCP 사용을 위한 DataSource를 Bean으로 등록 -->	
	<!-- destroy-method="close" : 주어진 세션을 자동으로 반환(close)하라는 설정 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">

      <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
      <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
      <property name="username" value="spring"/>
      <property name="password" value="spring"/>
      <!-- defaultAutoCommit: 풀에서 생성 된 연결의 기본 자동 커밋 상태입니다. 설정하지 않으면 setAutoCommit 메서드가 호출되지 않습니다. -->
      <property name="defaultAutoCommit" value="false"/>

      <!-- 커넥션 풀 설정 -->
      <property name="initialSize" value="10"/> <!-- 초기 커넥션 수, 기본 0 -->
      <property name="maxTotal" value="500"/> <!-- 최대 커넥션 수, 기본 8 -->
      <property name="maxIdle" value="100"/> <!-- 유휴 상태로 존재할 수 있는 커넥션 최대 수, 기본 8-->
      <property name="minIdle" value="10"/> <!-- 유휴 상태로 존재할 수 있는 커넥션 최소 수, 기본 0 -->
      <property name="maxWaitMillis" value="60000"/> <!-- 예외 발생 전 커넥션이 반환 될 떄 까지 대기하는 최대 시간(ms), 기본 -1(무기한) -->

    </bean>
    
    <!-- 
        SqlSession : sql구문을 DB에 전달, 실행하는 객체
        SqlSessionFactory : SqlSession을 만드는 객체
        sqlSessionFactoryBean : mybatis 설정 파일(mybatis-config.xml)과 Connection Pool 정보를 이용하여 SqlSessionFactory를 만드는 객체
        sqlSessionTemplate : SqlSession 객체에 트랜잭션 처리 역할이 가능하도록 하는 객체
     -->

    <!-- 마이바티스 SqlSession 등록하기 (xml 방식으로 bean 등록)-->
    <!-- SqlSessionFactoryBean: MyBatis 설정파일을 바탕으로 SqlSessionFactory를 생성한다. Spring Bean으로 등록해야 한다.
     -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- mybatis-config.xml 설정 불러오기 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- SqlSessionTemplate : 기본 SQL 실행  + 트랜잭션 관리 역할을 하는 SqlSession을 생성할 수 있게 하는 객체(Spring bean으로 등록해야함.)-->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactoryBean"/>
    </bean>
	
</beans>

