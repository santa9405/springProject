<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- 
		DispatcherServlet : HTTP를 이용해 들어오는 모든 요청을 프레젠테이션 계층 제일 앞에 두어
												중앙 집중식 처리를 해주는 프론트 컨트롤러
	 -->
	 
	 <!-- Handler Mapping : 요청 받은 주소에 맞는 클래스 or 메소드를 연결하는 역할 
	 		xml에 작성하여 bean 형식으로 등록 가능하지만 비효율적이므로 @ (Annotation) 방식을 사용
	 		-> @Controller, @RequestMapping 두 Annotation이 Handler MApping을 대체함
	 -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- annotation-driven : @Controller에 요청을 보내기 위한 HandlerMapping을 bean으로 등록함
		해당 태그가 작성되어야만 @RequestMapping, @ExceptionHandler와 같은 어노테이션을 사용할 수 있음
	-->
	<annotation-driven />

	<!-- 정적 자원 호출 경로 지정 -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />


	<!-- View Resolves : Controller에서 반환된 뷰의 이름을 토대로
											   처리할(응답화면) view를 검색하는 역할
											   
						점두사(prefix) + 반환된 View 이름 + 접미사(suffix)
					/WEB-INF/views/ 	common/main	     .jsp
	-->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- component-scan : 지정된 패키지에 있는 @Component와 그 구체화 요소(@Controller, @Service, @Repository)를 스캔하여 bean으로 등록하는 태그 
		bean으로 등록 됐다 == 스프링 컨테이너에 의해서 생성된 객체 == 스프링 컨테이너가 제어할 수 있는 객체 == IOC(제어의 역전)
		bean으로 등록된 객체는 개발자가 별도로 생성하지 않아도 스프링 컨테이너에 의해서 필요한 곳에 의존적으로 주입 == DI(의존성 주입)
	-->
	<context:component-scan base-package="com.kh.spring" />
	
	<!-- 스프링 스케쥴러 : 스케쥴러 관련 어노테이션 활성화 -->
	<task:annotation-driven/>
	
	<!-- AOP : AOP 관련 어노테이션 활성화 + proxy 제어 -->
	<aop:aspectj-autoproxy/>
	
	<!-- WebSocket -->
	<beans:bean id="chatHandler" class="com.kh.spring.common.websocket.ChattingWebsocketHandler" />
	<websocket:handlers>
	
		<websocket:mapping handler="chatHandler" path="/chat" />
		
		<websocket:handshake-interceptors>
			<!-- interceptor : http통신에서 request, response 객체를 가로채는 역할의 객체 
					handshake-interceptors : HttpSession을 가로채서 WebSocketSession에 넣어주는 역할
			-->
			<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor" />
		</websocket:handshake-interceptors>
		
		<websocket:sockjs />
	
	</websocket:handlers>
	
</beans:beans>
